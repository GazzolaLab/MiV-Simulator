
begintemplate PR_nrn

   public soma, dend, sections, all
   create soma, dend
   public pp, gc, Ltotal
   public init_ic
   objref sections, all
   
   func is_art() {return 0}
   func is_reduced() {return 1}

   func lambda_f() { local i, x1, x2, d1, d2, lam
       if (n3d() < 2) {
           return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
       }
       x1 = arc3d(0)
       d1 = diam3d(0)
       lam = 0
       for i=1, n3d()-1 {
           x2 = arc3d(i)
           d2 = diam3d(i)
           lam += (x2 - x1)/sqrt(d1 + d2)
           x1 = x2   d1 = d2
       }
       //  length of the section in units of lambda
       lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
       
       return L/lam
   }
   
   proc init() {
       if (numarg() > 1) {
           parameters($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
       } else if (numarg() > 0) {
           parameters_from_python($o1)
       } else {
           parameters() 
       }
       init_topology_0()
       geometry()
       biophys()
       all = new SectionList()
       sections = new SectionList()
       soma { sections.append() all.append() }
       dend { sections.append() all.append() }
     }
//
// SPEC: Geometry for a simple 2 compartment neuron.
//       from Pinsky and Rinzel, JCompNeuro, 1994
// 

proc parameters() {
    if (numarg() > 0) {
        pp = $1 // proportion of area taken up by soma
        Ltotal = $2 // total length of compartments
        gc = $3 // mS/cm2; Ra in ohm-cm
        
        cm_ratio = 1
	global_cm = $4 
	global_diam = $5
        
        soma_g_pas=$6
        soma_gmax_Na = $7
        soma_gmax_K = $8
        
        dend_g_pas = $9
        dend_gmax_Ca = $10
        dend_gmax_KCa = $11
        dend_gmax_KAHP = $12
        
        dend_d_Caconc = $13
        
    } else {
        
        pp = 0.5 // proportion of area taken up by soma
        Ltotal = 400/PI // total length of compartments
        gc=10.5 // mS/cm2; Ra in ohm-cm
        
        soma_g_pas=0.0001
        soma_gmax_Na = 00030e-3
        soma_gmax_K = 00015e-3
        
        dend_g_pas=0.0001
        dend_gmax_Ca = 00010e-3
        dend_gmax_KCa = 00015e-3
        dend_gmax_KAHP = 0000.8e-3
        
        dend_d_Caconc = 13
        
	cm = 3
    }
}


proc parameters_from_python() { localobj param_dict
    
    param_dict = $o1
    
    pp = param_dict.__getitem__("pp") // proportion of area taken up by soma
    Ltotal = param_dict.__getitem__("Ltotal") // total length of compartments
    gc = param_dict.__getitem__("gc") // mS/cm2; Ra in ohm-cm

    global_diam = param_dict.__getitem__("global_diam")
    global_cm = param_dict.__getitem__("global_cm")
    cm_ratio = param_dict.get("cm_ratio", 1.)
    
    soma_g_pas= param_dict.__getitem__("soma_g_pas")
    soma_gmax_Na = param_dict.__getitem__("soma_gmax_Na")
    soma_gmax_K = param_dict.__getitem__("soma_gmax_K")
    
    dend_g_pas = param_dict.__getitem__("dend_g_pas")
    dend_gmax_Ca = param_dict.__getitem__("dend_gmax_Ca")
    dend_gmax_KCa = param_dict.__getitem__("dend_gmax_KCa")
    dend_gmax_KAHP = param_dict.__getitem__("dend_gmax_KAHP")
    dend_d_Caconc = param_dict.__getitem__("dend_d_Caconc")
    
}


//
// PROCEDURE: geometry
//      DESC: Calls all necessary procs
//            to specify parameters of
//            the given section.
//
proc geometry() {
      init_dx_0()
      init_diam_0()
      init_nseg_0()
  }

//
// PROCEDURE: init_topology
//      DESC: Connections between
//            all compartments are
//            specified in this proc.
//
proc init_topology_0() {
      soma connect dend(0), 1
  }

//
// PROCEDURE: init_dx_0
//      DESC: Lengths of all
//            compartments are
//            specified in this proc.
//
proc init_dx_0() { 
      soma.L = pp*Ltotal
      dend.L = (1-pp)*Ltotal
  }
  
  
proc init_nseg_0() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}

//
// PROCEDURE: init_diam_0
//      DESC: Diameters of all
//            compartments are
//            specified in this proc.
//
proc init_diam_0() { 
      soma.diam = global_diam
      dend.diam = global_diam
  }
  
proc init_ic() {
      v_init = $1
      finitialize(v_init)
      
      forsec "soma" {
          ic_constant = -(ina + ik + i_pas)
      }
      
  }
  
proc biophys () {
    
    //* Electrical parameters
    
    forall Ra=1
    // adjust Ra to get the desired longitudinal resistance
    global_Ra = (1e-6/(gc/pp * (area(0.5)*1e-8) * 1e-3))/(2*ri(0.5))
    
    forall { Ra=global_Ra  cm=global_cm }
    
    
    forsec "soma" {
        
        cm = global_cm*cm_ratio
        
        insert pas
        insert constant
        insert Na_PR
        insert K_PR
        insert Na_conc_PR
        insert K_conc_PR
        
        gmax_Na_PR = soma_gmax_Na
        gmax_K_PR = soma_gmax_K
        g_pas = soma_g_pas
        e_pas = -60.
      }

    //* dend
    forsec "dend" {
        insert pas
        insert Ca_PR
        insert KAHP_PR
        insert KCa_PR
        insert Ca_conc_PR
        insert K_conc_PR
        
        d_Caconc_PR = dend_d_Caconc
        g_pas=dend_g_pas
        e_pas=-60.
        gmax_Ca_PR = dend_gmax_Ca
        gmax_KCa_PR = dend_gmax_KCa
        gmax_KAHP_PR = dend_gmax_KAHP

    }
    

  }

endtemplate PR_nrn
