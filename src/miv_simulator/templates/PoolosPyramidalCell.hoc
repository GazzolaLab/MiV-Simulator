begintemplate PoolosPyramidalCell

// public variables
public is_art, gid, randi, Vrest
public init, topol, basic_shape, subsets, geom, biophys
public pre_list, connect_pre, connect2target

public sections, all, basal_list, apical_list, soma_list, axon_list, dendrite_list, ais_list, hillock_list
public x, y, z, position, myroot, Vrest
public dendidx, apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx

// strings
strdef myroot

// objects
objref syn, pre_list, templist, rootlist, this
objref all, basal_list, apical_list, dendrite_list, soma_list, axon_list, ais_list, hillock_list
objref dendidx, apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx
objref pyenv

create sections[1]

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


iterator pyitr() {local i, k, x, n, sz localobj itr1, itrn
    sz = $1
    n = (numarg()-1) / 2
    i = 1+n+1
    itr1 = $oi
    
    for k = 0, sz-1 {
        for x = 1, n {
            i = 1+n+x
            itrn = $oi
            i = 1+x
            $&i = itrn.__next__()
        }
        iterator_statement
    }
}


func get_layer() {
    
    d = $1
    if (d > 300) {
        return 9 // SLM
    } else if (d > 150) {
        return 8 
    } else if (d < 0) {
        return 5 
    } else {
        return 6
    }
}

// set the initialization code, which is run whenever a new object
// of this class is instantiated
proc init() {
	gid = $1
	Vrest = -66 // -65 // $3 resting membrane potential in mV
	// cell sections: soma, dendrites, axon
                
        apicalidx = new Vector()
        basalidx = new Vector()
        somaidx = new Vector()
        dendidx = new Vector()
        axonidx = new Vector()
        aisidx = new Vector()
        hilidx = new Vector()
        
        pyenv = new PythonObject()
    	nrnpython("import numpy as np")
        
        shape_from_python($o2,$o7,$o8,$o9,$o10)
        topol_from_python($o2,$o3,$o4,$o5,$o6,$o11)
        
	append_sections() // append all sections to the section list
	define_shape()
	
	// subcellular mechanisms: channels, pumps, transporters
	mechinit()			// local fcn: set values for max conductances and reversal potentials of ion channels and other ephys parameters that are subject to fitting
	insert_mechs()		// local fcn: insert ion channels and actually set values determined in the mechinit fcn
	
	get_root()
	rotate_shape()
	
}


proc append_sections() { local i
    
        all = new SectionList()
	basal_list = new SectionList()
	apical_list = new SectionList()
	soma_list = new SectionList()
	axon_list = new SectionList()
	ais_list = new SectionList()
	hillock_list = new SectionList()
	dendrite_list = new SectionList()


        for i=0, somaidx.size()-1 {
		sections[somaidx.x[i]] all.append()
		sections[somaidx.x[i]] soma_list.append()
	}
        for i=0, dendidx.size()-1 {
		sections[dendidx.x[i]] all.append()
		sections[dendidx.x[i]] dendrite_list.append()
	}

	for i=0, apicalidx.size()-1 {
		sections[apicalidx.x[i]] apical_list.append()
	}

	for i=0, basalidx.size()-1 {
		sections[basalidx.x[i]] basal_list.append()
	}

	for i=0, axonidx.size()-1 {
		sections[axonidx.x[i]] all.append()
		sections[axonidx.x[i]] axon_list.append()
	}

	for i=0, aisidx.size()-1 {
		sections[aisidx.x[i]] all.append()
		sections[aisidx.x[i]] ais_list.append()
	}


}


proc rotate_shape() {local i
	forsec all {
		for i=0,n3d()-1 {
			pt3dchange(i, y3d(i), x3d(i), z3d(i), diam3d(i))
		}
	}
}

external lambda_f
proc set_nseg() {
  forsec all { nseg = int((L/(0.1*lambda_f(100))+.9)/2)*2 + 1  }
}

proc mechinit() {

	Rm = 28000 // 5555 // 
	RmDend = Rm/2
	RmSoma = Rm
	RmAx = Rm

	Cm    = 1
	CmSoma= Cm
	CmAx  = Cm
	CmDend = Cm*2

	celsius = 34.0  

	RaAll= 150 
	RaSoma=150 
	RaAx = 50


	ekval = -90
	enaval = 55
	eHCNval = -30
	eleakval = 	Vrest // not lower than ekval

	gNav     = 0.032 // Nav conductance in mho/cm2
	gNavaxon = 0.064 // axon multiplier for Nav conductance
	gKdr     = 0.003 // Kdr conductance in mho/cm2
	gKvAdist = 0.008 // distal KvA conductance in mho/cm2
	gKvAprox = 0.008 // proximal KvA conductance in mho/cm2
	gHCN     = 0.0006 // hcurrent conductance in mho/cm2 --> 6 pS/um2
}
	
proc insert_mechs() {
	sections[somaidx.x[0]] {
	    distance()
        }


	forsec axon_list {
		insert ch_Navaxonp gmax_ch_Navaxonp=gNavaxon
		insert ch_Kdrp gmax_ch_Kdrp=gKdr
		insert pas e_pas=eleakval g_pas = 1/RmAx Ra=RaAx cm=CmAx
		insert ch_KvAproxp gmax_ch_KvAproxp = gKvAprox*0.2
	}


	forsec soma_list {   
		insert ch_HCNp gmax_ch_HCNp=gHCN
		vhalfl_ch_HCNp=-82
		insert ch_Navp  gmax_ch_Navp=gNav     
		ar2_ch_Navp=1
		insert ch_Kdrp gmax_ch_Kdrp=gKdr
		insert ch_KvAproxp gmax_ch_KvAproxp = gKvAprox
		insert pas e_pas=eleakval g_pas = 1/RmSoma Ra=RaSoma cm=CmSoma
	    }
            
        forsec basal_list {
		insert ch_Navp    gmax_ch_Navp=gNav   
		ar2_ch_Navp=1
		insert ch_Kdrp gmax_ch_Kdrp=gKdr 
		insert ch_KvAproxp gmax_ch_KvAproxp = gKvAprox
		insert pas e_pas=eleakval g_pas = 1/RmDend Ra=RaAll cm=CmDend
	    }
            
        forsec apical_list {
		insert pas e_pas=eleakval g_pas = 1/RmDend Ra=RaAll  cm=CmDend
		if (diam>0.5 && distance(0.5)<500) {
			insert ch_HCNp gmax_ch_HCNp = gHCN
			insert ch_Navp 
			ar2_ch_Navp=0.8
			gmax_ch_Navp=gNav
			insert ch_Kdrp 
			gmax_ch_Kdrp=gKdr
			insert ch_KvAproxp
			insert ch_KvAdistp
			gmax_ch_KvAproxp=0
			gmax_ch_KvAdistp=0

			for (x,0){ xdist = distance(x)
				if (xdist>500) {xdist=500}
				gmax_ch_HCNp(x) = gHCN*(1+1.5*xdist/100)
				if (xdist > 100){
					vhalfl_ch_HCNp=-90
					gmax_ch_KvAdistp(x) = gKvAdist*(1+xdist/100)
				} else {
					vhalfl_ch_HCNp=-82
					gmax_ch_KvAproxp(x) = gKvAprox*(1+xdist/100)
				}
			}
		}
	}

	forall {
            v=Vrest
            if (ismembrane("ch_Navaxonp") || ismembrane("ch_Navp")) {ena=enaval}
            if (ismembrane("ch_Kdrp") || ismembrane("ch_KvAproxp") || ismembrane("ch_KvAdistp")) {ek=ekval}
            if (ismembrane("ch_HCNp") ) {e_ch_HCNp=eHCNval}
	}
}


func is_art() { return 0 }

proc connect_pre() {  // $o1 target point process, $o2 returned NetCon
	soma $o2 = new NetCon (&v(1), $o1)
			$o2.threshold = -10
}

proc position(){ local i
	forall {
		for i = 0, n3d()-1 {
			pt3dchange(i, $1-x+x3d(i), $2-y+y3d(i), $3-z+z3d(i), diam3d(i))
		}
	}
	x = $1  y = $2  z = $3	
}

proc get_root() {local i localobj sref
	rootlist = new SectionList()
	rootlist.allroots()
	i=0
	forsec all {
		for(x,0) { if (diam(x) <=0.01) print "small diameter at ", secname(), diam(x) }
		if (L<=0.001) print "small length at: ", secname(), L
		sref = new SectionRef()
		if (sref.has_parent==0) {
			myroot = secname()
			i=i+1
		}
	}
	if (i>1) {
		print "WARNING: cell ", gid, " has ", i, " root sections!"
	    }
        }

proc topol_from_python() { local i,j,l,p,s,p_layer,loc,vlen localobj vsrc, vdst, vloc, secnodes, layers, swc_types
    
    secnodes = $o1
    layers   = $o2
    
    vlen     = $o3.size
    vsrc     = pyenv.iter($o3)
    vdst     = pyenv.iter($o4)
    vloc     = pyenv.iter($o5)
    swc_types = $o6
    
    nDends = 0
    nSoma  = 0
    nAxon  = 0
    nAIS   = 0
    nHill  = 0
    
    for s=0, secnodes.__len__()-1 {
        
        p = secnodes.__getitem__(s)._[-1]
        p_layer = layers._[p]
        swc_type = swc_types._[p]

        if (swc_type == 4) {
            nDends = nDends + 1
            dendidx.append(s)
            apicalidx.append(s)
        }
        if (swc_type == 3) {
            nDends = nDends + 1
            dendidx.append(s)
            basalidx.append(s)
        }
        if (swc_type == 8) {
            hilidx.append(s)
            nHill = nHill + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 7) {
            aisidx.append(s)
            nAIS = nAIS + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 2) {
            axonidx.append(s)
            nAxon = nAxon + 1
        }
        if (swc_type == 1) {
            somaidx.append(s)
            nSoma = nSoma + 1
        }
        
    }
    
    for pyitr (vlen, &i, &j, &l, vsrc, vdst, vloc) {
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        assert (j < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        sections[i] loc = arc3d(l) / L 
        connect sections[j](0),sections[i](loc)
        
    }
    
}


proc shape_from_python() { local x,y,z,r,s,p localobj secnodes, pidxs, vx, vy, vz, vradius
    
    secnodes = $o1
    vx = $o2
    vy = $o3
    vz = $o4
    vradius = $o5
    
    create sections[secnodes.__len__()]
    for s=0, secnodes.__len__()-1 {
        pidxs = secnodes.__getitem__(s)
        sections[s] {
            pt3dconst(0)
            for pyitr (pidxs.size, &p, pyenv.iter(pidxs)) {
                
                x = vx._[p]
                y = vy._[p]
                z = vz._[p]
                r = vradius._[p]

                pt3dadd(x, y, z, 2*r)
            }
        }
    }
    
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
    forsec soma_list {
        nc = new NetCon(&v(1), $o1)
    }
    nc.threshold = -20
    if (numarg() == 2) { $o2 = nc } // for backward compatibility
    return nc
}
        
endtemplate PoolosPyramidalCell
